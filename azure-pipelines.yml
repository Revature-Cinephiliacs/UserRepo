# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'a54a37f9-1fc9-4603-a53d-7c45ac9bc46d'
  imageRepository: 'revaturecinephiliacsuserrepo'
  containerRegistry: '03012021batchp3acr.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: '03012021batchp3acr18332fbb-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Sonarcloud
    displayName: SonarCloud
    pool:
      vmImage: $(vmImageName)
    variables:
      solution: '*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core SDK'
        inputs:
          packageType: 'sdk'
          version: '5.0.x'
          # performMultiLevelLookup: true
          # includePreviewVersions: false # Required 'true' to use preview versions
      - task: UseDotNet@2
        displayName: 'Install .NET Core Runtime'
        inputs:
          packageType: 'runtime'
          version: '2.x'
          # performMultiLevelLookup: true
      - task: NodeTool@0
        inputs:
          versionSpec: '11.x'
      - task: NuGetToolInstaller@1
      - task: NuGetCommand@2
        inputs:
          restoreSolution: '$(solution)'

      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloudAdminTools'
          organization: 'revature-cinephiliacs'
          scannerMode: 'MSBuild'
          projectKey: 'Revature-Cinephiliacs_UserRepo'
          projectName: 'UserRepo'
          extraProperties: 
            sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/*/coverage.opencover.xml

      - task: DotNetCoreCLI@2
        inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: 'Testing/*.csproj'
          arguments: '--configuration $(buildConfiguration) --collect "xplat code coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover'
          testRunTitle: 'Dotnet tests running'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'RevatureCinephiliacsUserRepo-8009.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

